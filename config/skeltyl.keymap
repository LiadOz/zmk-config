#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// The default keymap is roughly on Miryoku layout
// (https://github.com/manna-harbour/miryoku).
// Customize on your own on the config folder.

#define BASE    0
#define NAV     1
#define SYM     2
#define NUM     3

#define KEYS_L  0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R  5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define KEYS_TL 30 31 32
#define KEYS_TR 33 34 35
#define TMB     KEYS_TL KEYS_TR

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <130>;
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R TMB>;
            hold-trigger-on-release;
            display-name = "Home Row Left";
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <130>;
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L TMB>;
            hold-trigger-on-release;
            display-name = "Home Row Right";
        };
    };

    macros {
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    &kp Q        &kp W       &kp E        &kp R        &kp T                          &kp Y     &kp U        &kp I        &kp O       &kp P
    &hml LGUI A  &hml LALT S &hml LCTRL D &hml LSHFT F &kp G                          &kp H     &hmr LSHFT J &hmr LCTRL K &hmr LALT L &hmr LGUI SEMI
    &kp Z        &kp X       &kp C        &kp V        &kp B                          &kp N     &kp M        &kp COMMA    &kp DOT     &kp FSLH
                             &kp LSHFT    &lt NAV RET  &lt NUM TAB       &lt SYM BSPC &kp SPACE &kp LSHFT
            >;
        };

        nav_layer {
            bindings = <
    &kp LC(D)    &kp LC(W)    &kp LC(U)    &kp LC(F)    &LC(T)                                 &kp CAPS    &kp C_PREV  &kp C_VOL_UP &kp C_VOL_DN &kp C_NEXT
    &kp LGUI     &kp LALT     &kp LCTRL    &kp LSHFT    &LA(F4)                                &caps_word  &kp LEFT    &kp DOWN     &kp UP       &kp RIGHT
    &kp LC(Z)    &kp LC(X)    &kp LC(C)    &kp LC(V)    &kp LC(B)                              &kp INS     &kp HOME    &kp PG_DN    &kp PG_UP    &kp END
                                           &kp LSHFT    &trans  &bootloader       &kp BSPC     &kp SPACE  &kp LSHFT
            >;
        };

        sym_layer {
            bindings = <
    &kp EXCL    &kp AT      &kp HASH    &kp DLLR  &kp PRCNT                         &kp CARET   &kp AMPS    &kp STAR    &kp LPAR    &kp RPAR
    &none       &none       &none       &none     &none                             &none       &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT
    &kp MINUS   &kp PLUS    &kp EQUAL   &kp LBKT  &kp RBKT                          &kp UNDER   &kp LBRC    &kp RBRC    &kp PIPE    &kp TILDE
                                        &none     &none      &none          &trans  &none       &none
            >;
        };

        num_layer {
            bindings = <
    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5                          &kp N6      &kp N7   &kp N8    &kp N9  &kp N0
    &kp LG(N1)   &kp LG(N2)   &kp LG(N3)   &kp LG(N4)   &kp LG(N5)                      &kp C_STOP  &kp C_PP &kp GRAVE &kp DQT &kp SQT
    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR                      &none       &none    &none     &none   &kp BLSH 
                                           &kp LSHFT    &kp RET  &trans         &none   &none       &none
            >;
        };
    };
};
