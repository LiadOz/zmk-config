/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// need function keys?
/ {
    behaviors {
        mgresc: my_grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "MY_GRAVE_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LGUI)>;
		};
        bs_us: backspace_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_UNDERSCORE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp UNDERSCORE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
    macros {
        altffour: altffour {
            label = "altffour";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp F4>
                , <&macro_release &kp LALT>
            ;
        };

    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |     |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |     | ENT | RSE  | ALT |
                        bindings = <
   &mgresc   &kp Q &kp W &kp E &kp R &kp T     &kp Y &kp U  &kp I     &kp O   &kp P    &bs_us
   &kp TAB   &kp A &kp S &kp D &kp F &kp G     &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B     &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHIFT
                  &kp LGUI &kp LCTRL &lt 1 ENTER &kp SPACE &mo 2 &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT | OUT |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &out OUT_TOG &kp N1       &kp N2       &kp N3    &kp N4   &kp N5        &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &trans
   &trans       &bt BT_SEL 0 &bt BT_SEL 1 &altffour &kp LALT &bt BT_CLR    &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT    &kp MINUS    &kp PLUS     &kp EQUAL &kp LBKT  &kp RBKT  &trans   &trans   &trans &trans    &trans &kp RSHIFT
                                    &trans     &trans   &trans        &trans  &trans   &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp DEL
   &trans  &trans   &trans &trans   &kp HOME   &kp PG_UP    &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp BSLH &kp GRAVE
   &trans  &trans   &trans &trans   &kp END   &kp PG_DN      &kp UNDER &trans  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                             &trans &trans   &trans &trans   &trans    &trans
                        >;
                };
        };
};
